"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
"""
import logging
import asyncio
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from telegram.error import TelegramError

from config import (
    TELEGRAM_BOT_TOKEN, 
    MESSAGES, 
    REGISTRATION_STEPS,
    LOG_LEVEL
)
from database import Database
from utils import (
    extract_email_from_text, 
    is_valid_email, 
    extract_channel_info,
    is_valid_channel_url,
    format_user_info,
    get_registration_step_name,
    is_valid_url,
    is_valid_username_or_userid,
    format_telegram_dm_url,
    get_default_button_texts
)
from n8n_client import N8NClient
from admin_notifier import AdminNotifier
from voice_transcriber import VoiceTranscriber

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL, logging.INFO)
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.db = Database()
        self.n8n_client = N8NClient()
        self.admin_notifier = AdminNotifier()
        self.voice_transcriber = VoiceTranscriber()
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.bot_username = None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
        
        logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(
            filters.VOICE, 
            self.handle_voice_message
        ))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {format_user_info(user)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await self.db.update_last_activity(user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = await self.db.get_user_by_telegram_id(user.id)
        
        if user_data and user_data['registration_step'] == REGISTRATION_STEPS['COMPLETED']:
            await update.message.reply_text(
                "üéâ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤:",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(MESSAGES['welcome'])

    async def _setup_menu_button(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await self.application.bot.set_my_commands([
                BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            ])
            
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")

    def _get_registered_user_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç", callback_data="write_post")]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {format_user_info(user)}: {message_text[:100]}...")
        
        await self.db.update_last_activity(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await self.db.get_user_by_telegram_id(user.id)
        
        if not user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ email
            await self._handle_email_registration(update, message_text, user)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            active_session = await self.db.get_active_post_session(user.id)
            
            if active_session:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                session_status = active_session['session_status']
                
                if session_status in ['question_1', 'question_2', 'question_3']:
                    await self._handle_post_creation_answer(update, message_text, user_data, active_session)
                elif session_status == 'button_config':
                    await self._handle_button_config_input(update, message_text, user_data, active_session)
                elif session_status == 'button_text_selection':
                    await self._handle_custom_button_text_input(update, message_text, user_data, active_session)
                else:
                    await update.message.reply_text(
                        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                        reply_markup=self._get_registered_user_keyboard()
                    )
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                step = user_data['registration_step']
                
                if step == REGISTRATION_STEPS['EMAIL_CONFIRMED']:
                    await self._handle_channel_url(update, message_text, user_data)
                elif step == REGISTRATION_STEPS['CHANNEL_ADDED']:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                    channel_info = extract_channel_info(message_text)
                    if channel_info:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª - –æ–±–Ω–æ–≤–ª—è–µ–º
                        await self._handle_channel_url(update, message_text, user_data)
                    else:
                        # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
                        await self._show_admin_reminder(update, user_data)
                elif step == REGISTRATION_STEPS['COMPLETED']:
                    await update.message.reply_text(
                        "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤:",
                        reply_markup=self._get_registered_user_keyboard()
                    )
                else:
                    await update.message.reply_text(
                        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞."
                    )

    async def _handle_email_registration(self, update: Update, message_text: str, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ email"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        email = extract_email_from_text(message_text)
        
        if not email:
            await update.message.reply_text(MESSAGES['invalid_email'])
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await self.db.find_user_by_email(email)
        
        if not user_data:
            await update.message.reply_text(MESSAGES['email_not_found'])
            return
        
        # Email –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ
        telegram_data = {
            'telegram_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        
        success = await self.db.update_user_telegram_data(email, telegram_data)
        
        if success:
            await update.message.reply_text(MESSAGES['email_confirmed'])
            logger.info(f"Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {format_user_info(user)}")
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _handle_channel_url(self, update: Update, message_text: str, user_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        
        channel_info = extract_channel_info(message_text)
        
        if not channel_info:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ @channel_name\n"
                "‚Ä¢ https://t.me/channel_name"
            )
            return
        
        channel_username, channel_url = channel_info
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        success = await self.db.update_channel_data(
            user_data['telegram_id'], 
            channel_url
        )
        
        if not success:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if not self.bot_username:
            bot_info = await self.application.bot.get_me()
            self.bot_username = bot_info.username
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data="admin_added")
        ]])
        
        instructions = MESSAGES['channel_instructions'].format(
            bot_username=self.bot_username
        )
        
        await update.message.reply_text(
            instructions,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user = query.from_user
        
        await query.answer()
        await self.db.update_last_activity(user.id)
        
        if query.data == "admin_added":
            await self._check_admin_rights(query, user)
        elif query.data == "write_post":
            await self._handle_write_post(query, user)
        elif query.data == "post_approved":
            await self._handle_post_approval(query, user)
        elif query.data == "post_rejected":
            await self._handle_post_rejection(query, user)
        elif query.data == "button_type_dm":
            await self._handle_button_type_selection(query, user, "dm")
        elif query.data == "button_type_website":
            await self._handle_button_type_selection(query, user, "website")
        elif query.data.startswith("button_text_"):
            await self._handle_button_text_selection(query, user, query.data)
        elif query.data == "final_post_approved":
            await self._handle_final_post_approval(query, user)
        elif query.data == "final_post_rejected":
            await self._handle_final_post_rejection(query, user)

    async def _check_admin_rights(self, query, user):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await self.db.get_user_by_telegram_id(user.id)
        
        if not user_data or not user_data.get('channel_url'):
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start"
            )
            return
        
        await query.edit_message_text(MESSAGES['checking_admin'])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        admin_check_result = await self._check_admin_rights_for_channel(user_data)
        
        if admin_check_result['is_admin']:
            # –ü—Ä–∞–≤–∞ –µ—Å—Ç—å - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await query.edit_message_text(
                MESSAGES['registration_complete'],
                reply_markup=self._get_registered_user_keyboard()
            )
            
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {format_user_info(user)}")
        else:
            # –ü—Ä–∞–≤ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            await query.edit_message_text(
                admin_check_result['message'],
                reply_markup=admin_check_result.get('reply_markup'),
                parse_mode='Markdown'
            )

    async def _handle_write_post(self, query, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç'"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user_data = await self.db.get_user_by_telegram_id(user.id)
        
        if not user_data or user_data['registration_step'] != REGISTRATION_STEPS['COMPLETED']:
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ—Å—Ç–∞
        admin_check_result = await self._check_admin_rights_for_channel(user_data)
        
        if not admin_check_result['is_admin']:
            await query.edit_message_text(
                admin_check_result['message'],
                reply_markup=admin_check_result.get('reply_markup'),
                parse_mode='Markdown'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        session_id = await self.db.create_post_session(user_data['id'], user.id)
        
        if not session_id:
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await query.edit_message_text(MESSAGES['post_creation_start'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        await query.message.reply_text(MESSAGES['question_1'])
        
        logger.info(f"–ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {format_user_info(user)}")

    async def _check_admin_rights_for_channel(self, user_data: dict) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_data (dict): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–ª—è–º–∏ is_admin, message, reply_markup
        """
        try:
            if not user_data.get('channel_url'):
                return {
                    'is_admin': False,
                    'message': "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start",
                    'reply_markup': self._get_registered_user_keyboard()
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∫–∞–Ω–∞–ª–∞
            channel_username = user_data['channel_url'].split('/')[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏
            if not self.bot_username:
                bot_info = await self.application.bot.get_me()
                self.bot_username = bot_info.username
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                chat_member = await self.application.bot.get_chat_member(
                    f"@{channel_username}", 
                    self.application.bot.id
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∞–≤–∞
                is_admin = (
                    chat_member.status in ['administrator', 'creator'] and
                    getattr(chat_member, 'can_post_messages', False)
                )
                
                if is_admin:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                    await self.db.update_admin_status(user_data['telegram_id'], True)
                    
                    return {
                        'is_admin': True,
                        'message': "‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã"
                    }
                else:
                    # –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω - –¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                    return self._get_not_admin_response(channel_username)
                    
            except TelegramError as e:
                if "chat not found" in str(e).lower():
                    return {
                        'is_admin': False,
                        'message': f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        'reply_markup': self._get_registered_user_keyboard()
                    }
                else:
                    # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –±–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∞—Ö
                    return self._get_not_admin_response(channel_username)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {e}")
            return {
                'is_admin': False,
                'message': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                'reply_markup': self._get_registered_user_keyboard()
            }

    def _get_not_admin_response(self, channel_username: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="admin_added")
        ]])
        
        message = f"""
‚ùå **–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ @{channel_username}**

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –í—ã —É–¥–∞–ª–∏–ª–∏ –º–µ–Ω—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ù–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ö–∞–Ω–∞–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω

üìã **–ß—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å:**

1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª @{channel_username}
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤–≤–µ—Ä—Ö—É  
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º"
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
5Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –º–µ–Ω—è (@{self.bot_username}) –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ
6Ô∏è‚É£ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ **–ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π**

–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞" üëá
"""
        
        return {
            'is_admin': False,
            'message': message.strip(),
            'reply_markup': keyboard
        }

    async def _handle_post_creation_answer(self, update: Update, message_text: str, 
                                         user_data: dict, active_session: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        
        session_status = active_session['session_status']
        session_id = active_session['id']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        if session_status == 'question_1':
            question_num = 1
            next_message = MESSAGES['question_2']
        elif session_status == 'question_2':
            question_num = 2
            next_message = MESSAGES['question_3']
        elif session_status == 'question_3':
            question_num = 3
            next_message = MESSAGES['generating_post']
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            await update.message.reply_text(
                "ü§î –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await self.db.update_session_answer(session_id, question_num, message_text.strip())
        
        if not success:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç {question_num} –≤ —Å–µ—Å—Å–∏–∏ {session_id}: {message_text[:50]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if question_num < 3:
            await update.message.reply_text(next_message)
        else:
            # –í—Å–µ —Ç—Ä–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            await update.message.reply_text(next_message)
            await self._start_post_generation(update, user_data, session_id)

    async def _start_post_generation(self, update: Update, user_data: dict, session_id: int):
        """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ n8n"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏
            answers = await self.db.get_session_answers(session_id)
            
            if not answers or not all(answers.values()):
                await update.message.reply_text(MESSAGES['generation_error'])
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n
            success = await self.n8n_client.send_post_generation_request(user_data, answers, session_id)
            
            if not success:
                await update.message.reply_text(MESSAGES['generation_error'])
                await self.db.clear_session_answers(session_id)
                return
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∞–π–º–∞—É—Ç–∞
            asyncio.create_task(self._monitor_generation_timeout(session_id, user_data))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
            await update.message.reply_text(MESSAGES['generation_error'])
            await self.admin_notifier.notify_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}", user_data)

    async def _monitor_generation_timeout(self, session_id: int, user_data: dict):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
        
        # –ñ–¥–µ–º 3 –º–∏–Ω—É—Ç—ã
        await asyncio.sleep(180)  # 3 –º–∏–Ω—É—Ç—ã = 180 —Å–µ–∫—É–Ω–¥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ —Å–µ—Å—Å–∏—è –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        session = await self.db.get_active_post_session(user_data['telegram_id'])
        
        if session and session['id'] == session_id and session['session_status'] == 'generating':
            # –¢–∞–π–º–∞—É—Ç! –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await self.admin_notifier.notify_timeout(user_data, session_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º n8n –æ —Ç–∞–π–º–∞—É—Ç–µ
            await self.n8n_client.notify_timeout(user_data, session_id)
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.db.clear_session_answers(session_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await self.application.bot.send_message(
                    chat_id=user_data['telegram_id'],
                    text=MESSAGES['generation_timeout'],
                    reply_markup=self._get_registered_user_keyboard()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['telegram_id']}: {e}")

    async def _handle_post_approval(self, query, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await self.db.get_active_post_session(user.id)
        
        if not active_session or active_session['session_status'] != 'reviewing':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏
        await self.db.update_session_status(active_session['id'], 'button_type_selection')
        
        await query.edit_message_text(MESSAGES['post_approved'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏
        await asyncio.sleep(1)
        await self._show_button_type_selection(query.message, active_session['id'])
        
        logger.info(f"–ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {active_session['id']}")

    async def _handle_post_rejection(self, query, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await self.db.get_active_post_session(user.id)
        
        if not active_session or active_session['session_status'] != 'reviewing':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await self.db.clear_session_answers(active_session['id'])
        
        await query.edit_message_text(MESSAGES['post_rejected'])
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ
        await asyncio.sleep(1)
        await query.message.reply_text(MESSAGES['post_creation_start'])
        await asyncio.sleep(1)
        await query.message.reply_text(MESSAGES['question_1'])
        
        logger.info(f"–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, –Ω–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ {active_session['id']}")

    def _get_post_review_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω–æ", callback_data="post_approved"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="post_rejected")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)



    async def _show_admin_reminder(self, update: Update, user_data: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if not self.bot_username:
            bot_info = await self.application.bot.get_me()
            self.bot_username = bot_info.username
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data="admin_added")
        ]])
        
        current_channel = user_data.get('channel_url', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        
        reminder_message = f"""
ü§ñ –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–Ω–∞–ª: {current_channel}

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.

üìã –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:

1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤–≤–µ—Ä—Ö—É
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º"
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
6Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –º–µ–Ω—è (@{self.bot_username}) –∏ –¥–æ–±–∞–≤—å—Ç–µ
7Ô∏è‚É£ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π

–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–ª–µ–Ω–æ" –Ω–∏–∂–µ üëá

üí° –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channel_name –∏–ª–∏ https://t.me/channel_name
        """
        
        await update.message.reply_text(
            reminder_message.strip(),
            reply_markup=keyboard
        )

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        voice = update.message.voice
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {format_user_info(user)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        if not self.voice_transcriber.is_available():
            await update.message.reply_text(
                "‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await self.db.get_user_by_telegram_id(user.id)
        if not user_data:
            await update.message.reply_text(MESSAGES['welcome'])
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        # –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ–¥–∏–Ω –∏–∑ 3 –≤–æ–ø—Ä–æ—Å–æ–≤
        is_answering_questions = await self._is_answering_post_questions(user_data)
        
        if not is_answering_questions:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            active_session = await self.db.get_active_post_session(user_data['telegram_id'])
            session_status = active_session.get('session_status') if active_session else 'no_session'
            
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. Session status: {session_status}")
            
            await update.message.reply_text(
                f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {session_status}\n\n"
                f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç\" –≤ –º–µ–Ω—é."
            )
            return
        
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await update.message.chat.send_action("typing")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file = await context.bot.get_file(voice.file_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
            file_bytes = await file.download_as_bytearray()
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            transcribed_text = await self.voice_transcriber.transcribe_voice_from_bytes(
                file_bytes
            )
            
            if transcribed_text:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text(
                    f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n\"{transcribed_text}\"\n\n"
                    f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                update.message.text = transcribed_text
                await self.handle_message(update, context)
                
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

    async def _is_answering_post_questions(self, user_data: dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        
        Args:
            user_data (dict): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ—Å—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_session = await self.db.get_active_post_session(user_data['telegram_id'])
            
            if not active_session:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            session_status = active_session.get('session_status')
            
            # –°—Ç–∞—Ç—É—Å—ã, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            question_statuses = ['question_1', 'question_2', 'question_3']
            
            return session_status in question_statuses
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            return False

    async def _show_button_type_selection(self, message, session_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üí¨ –í –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="button_type_dm"),
                InlineKeyboardButton("üåê –ù–∞ —Å–∞–π—Ç", callback_data="button_type_website")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            MESSAGES['button_type_selection'],
            reply_markup=reply_markup
        )

    async def _handle_button_type_selection(self, query, user, button_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await self.db.get_active_post_session(user.id)
        
        if not active_session or active_session['session_status'] != 'button_type_selection':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
        await self.db.update_button_data(active_session['id'], button_type=button_type)
        
        if button_type == "dm":
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º username —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.db.get_user_by_telegram_id(user.id)
            if user_data and user_data.get('username'):
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –õ–° —Å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                button_url = format_telegram_dm_url(user_data['username'])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–Ω–æ–ø–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–∫—Å—Ç–∞
                await self.db.update_button_data(active_session['id'], button_url=button_url)
                await self.db.update_session_status(active_session['id'], 'button_text_selection')
                
                await query.edit_message_text(
                    f"üí¨ –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –∫ @{user_data['username']}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                await asyncio.sleep(1)
                await self._show_button_text_selection(query.message, button_type)
                
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DM URL –¥–ª—è —Å–µ—Å—Å–∏–∏ {active_session['id']}: {button_url}")
            else:
                # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç username, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
                await self.db.update_session_status(active_session['id'], 'button_config')
                await query.edit_message_text(MESSAGES['button_dm_username_request'])
        else:  # website
            await self.db.update_session_status(active_session['id'], 'button_config')
            await query.edit_message_text(MESSAGES['button_website_url_request'])
        
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ {button_type} –¥–ª—è —Å–µ—Å—Å–∏–∏ {active_session['id']}")

    async def _handle_button_config_input(self, update, message_text: str, user_data: dict, active_session: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–Ω–æ–ø–∫–∏ (URL –∏–ª–∏ username)"""
        
        session_id = active_session['id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
        button_data = await self.db.get_session_button_data(session_id)
        if not button_data or not button_data['button_type']:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        button_type = button_data['button_type']
        input_text = message_text.strip()
        
        if button_type == "dm":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º username –∏–ª–∏ user_id
            if not is_valid_username_or_userid(input_text):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username –∏–ª–∏ user_id.\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username (–±–µ–∑ @) –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π user_id.\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: username –∏–ª–∏ 123456789"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –õ–°
            button_url = format_telegram_dm_url(input_text)
            
        else:  # website
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            if not is_valid_url(input_text):
                await update.message.reply_text(MESSAGES['invalid_url'])
                return
            
            button_url = input_text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–Ω–æ–ø–∫–∏
        await self.db.update_button_data(session_id, button_url=button_url)
        await self.db.update_session_status(session_id, 'button_text_selection')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        await self._show_button_text_selection(update.message, button_type)
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω URL –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {button_url}")

    async def _show_button_text_selection(self, message, button_type: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
        
        button_texts = get_default_button_texts(button_type)
        
        keyboard = []
        for i, text in enumerate(button_texts):
            keyboard.append([InlineKeyboardButton(text, callback_data=f"button_text_{i}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç", callback_data="button_text_custom")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            MESSAGES['button_text_selection'],
            reply_markup=reply_markup
        )

    async def _handle_button_text_selection(self, query, user, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await self.db.get_active_post_session(user.id)
        
        if not active_session or active_session['session_status'] != 'button_text_selection':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π
        if callback_data == "button_text_custom":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            await self._handle_custom_button_text_request(query, user)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        try:
            text_index = int(callback_data.split('_')[-1])
        except ValueError:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
        button_data = await self.db.get_session_button_data(active_session['id'])
        if not button_data:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
            
        button_type = button_data['button_type']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        button_texts = get_default_button_texts(button_type)
        if text_index < len(button_texts):
            selected_text = button_texts[text_index]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            await self.db.update_button_data(active_session['id'], button_text=selected_text)
            await self.db.update_session_status(active_session['id'], 'final_review')
            
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: \"{selected_text}\"")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            await asyncio.sleep(1)
            await self._show_final_post_preview(query.message, active_session['id'])
            
            logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {active_session['id']}: {selected_text}")
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏.",
                reply_markup=self._get_registered_user_keyboard()
            )

    async def _handle_custom_button_text_request(self, query, user):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await self.db.get_active_post_session(user.id)
        
        if not active_session or active_session['session_status'] != 'button_text_selection':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        await query.edit_message_text(
            "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\" –∏–ª–∏ \"–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É\""
        )

    async def _handle_custom_button_text_input(self, update, message_text: str, user_data: dict, active_session: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
        
        session_id = active_session['id']
        button_text = message_text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(button_text) > 100:
            await update.message.reply_text(
                "‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç."
            )
            return
        
        if len(button_text) < 1:
            await update.message.reply_text(
                "‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        await self.db.update_button_data(session_id, button_text=button_text)
        await self.db.update_session_status(session_id, 'final_review')
        
        await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \"{button_text}\"")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        await asyncio.sleep(1)
        await self._show_final_post_preview(update.message, session_id)
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {button_text}")

    async def _show_final_post_preview(self, message, session_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session = await self.db.get_active_post_session_by_id(session_id)
            if not session:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏.",
                    reply_markup=self._get_registered_user_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            button_data = await self.db.get_session_button_data(session_id)
            if not button_data or not all([button_data['button_text'], button_data['button_url']]):
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ.",
                    reply_markup=self._get_registered_user_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            post_content = session['generated_post']
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é)
            preview_keyboard = [[
                InlineKeyboardButton(button_data['button_text'], url=button_data['button_url'])
            ]]
            preview_markup = InlineKeyboardMarkup(preview_keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
            await message.reply_text(
                post_content,
                reply_markup=preview_markup,
                parse_mode='HTML'
            )
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–∫–µ–π", callback_data="final_post_approved"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="final_post_rejected")
                ]
            ]
            confirmation_markup = InlineKeyboardMarkup(confirmation_keyboard)
            
            await message.reply_text(
                "–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ—Å—Ç. –í—Å—ë –≤–µ—Ä–Ω–æ?",
                reply_markup=confirmation_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            await message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=self._get_registered_user_keyboard()
            )

    async def _handle_final_post_approval(self, query, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await self.db.get_active_post_session(user.id)
        
        if not active_session or active_session['session_status'] != 'final_review':
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        await query.edit_message_text("üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ...")
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
        success = await self._publish_post_to_channel(active_session['id'], user.id)
        
        if success:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.db.update_session_status(active_session['id'], 'completed')
            
            await query.message.reply_text(
                MESSAGES['post_published'],
                reply_markup=self._get_registered_user_keyboard()
            )
            
            logger.info(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {active_session['id']}")
        else:
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_registered_user_keyboard()
            )

    async def _handle_final_post_rejection(self, query, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await self.db.get_active_post_session(user.id)
        
        if not active_session:
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=self._get_registered_user_keyboard()
            )
            return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        await self.db.update_button_data(active_session['id'], 
                                       button_type=None, 
                                       button_url=None, 
                                       button_text=None)
        await self.db.clear_session_answers(active_session['id'])
        
        await query.edit_message_text(MESSAGES['post_rejected'])
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ
        await asyncio.sleep(1)
        await query.message.reply_text(MESSAGES['post_creation_start'])
        await asyncio.sleep(1)
        await query.message.reply_text(MESSAGES['question_1'])
        
        logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, –Ω–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ {active_session['id']}")

    async def _publish_post_to_channel(self, session_id: int, user_telegram_id: int) -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.db.get_user_by_telegram_id(user_telegram_id)
            if not user_data or not user_data.get('channel_url'):
                logger.error(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {user_telegram_id}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session = await self.db.get_active_post_session_by_id(session_id)
            if not session:
                logger.error(f"–°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            button_data = await self.db.get_session_button_data(session_id)
            if not button_data:
                logger.error(f"–î–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∫–∞–Ω–∞–ª–∞
            channel_username = user_data['channel_url'].split('/')[-1]
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [[
                InlineKeyboardButton(button_data['button_text'], url=button_data['button_url'])
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            await self.application.bot.send_message(
                chat_id=f"@{channel_username}",
                text=session['generated_post'],
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π run_polling
            self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TelegramBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
