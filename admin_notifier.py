"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""
import logging
from typing import Dict, Any, Optional
import aiohttp
from config import ADMIN_BOT_TOKEN, ADMIN_CHAT_ID

logger = logging.getLogger(__name__)

class AdminNotifier:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞"""
        self.bot_token = ADMIN_BOT_TOKEN
        self.chat_id = ADMIN_CHAT_ID
        
        if not self.bot_token or not self.chat_id:
            logger.warning("ADMIN_BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"

    async def notify_timeout(self, user_data: Dict[str, Any], session_id: int) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ —Ç–∞–π–º–∞—É—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
        
        Args:
            user_data (Dict): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id (int): ID —Å–µ—Å—Å–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.bot_token or not self.chat_id:
            logger.error("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False

        try:
            user_info = self._format_user_info(user_data)
            
            message = f"""
‚ö†Ô∏è **–¢–ê–ô–ú–ê–£–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–û–°–¢–ê**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}
üÜî Session ID: {session_id}
‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n (3 –º–∏–Ω—É—Ç—ã)

üìß Email: {user_data.get('email', 'N/A')}
üì∫ –ö–∞–Ω–∞–ª: {user_data.get('channel_url', 'N/A')}

–°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–Ω–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.
"""

            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }

            timeout = aiohttp.ClientTimeout(total=10)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.api_url, json=payload) as response:
                    if response.status == 200:
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {response.status}")
                        return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            return False

    async def notify_error(self, error_message: str, user_data: Optional[Dict[str, Any]] = None) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            user_data (Optional[Dict]): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.bot_token or not self.chat_id:
            return False

        try:
            message = f"üö® **–û–®–ò–ë–ö–ê –í –ë–û–¢–ï**\n\n{error_message}"
            
            if user_data:
                user_info = self._format_user_info(user_data)
                message += f"\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}"

            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }

            timeout = aiohttp.ClientTimeout(total=10)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.api_url, json=payload) as response:
                    if response.status == 200:
                        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {response.status}")
                        return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False

    async def notify_stats(self, stats: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω—É
        
        Args:
            stats (Dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.bot_token or not self.chat_id:
            return False

        try:
            message = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('registered_users', 0)}
üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats.get('active_sessions', 0)}
üéØ –ü–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats.get('posts_today', 0)}
"""

            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }

            timeout = aiohttp.ClientTimeout(total=10)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.api_url, json=payload) as response:
                    return response.status == 200

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False

    def _format_user_info(self, user_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Args:
            user_data (Dict): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        name_parts = []
        
        if user_data.get('first_name'):
            name_parts.append(user_data['first_name'])
        if user_data.get('last_name'):
            name_parts.append(user_data['last_name'])
        
        name = ' '.join(name_parts) if name_parts else '–ë–µ–∑ –∏–º–µ–Ω–∏'
        username = f"@{user_data.get('username')}" if user_data.get('username') else '–ë–µ–∑ username'
        telegram_id = user_data.get('telegram_id', 'N/A')
        
        return f"{name} ({username}) [ID: {telegram_id}]"
